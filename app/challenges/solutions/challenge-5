Challenge #5: Remediate both Command Injection and Reflected Cross-site Scripting (XXS).
Objective: Prevent a user to input arbitrary code in the vulnerable form by implementing input validation. Confirm that it has been fixed by running ZAP and 
testings with different injections. Make sure that the application still works by testing a ping to google.com.
Location: exec.php
Reference: https://www.w3schools.com/php/php_form_validation.asp

Solution:
In exec.php, replace:

if ($_SERVER["REQUEST_METHOD"] == "POST") {
        echo "<h2>Your Results for " . $_POST["target"] . "</h2>";
        $output = shell_exec('ping -c 3 ' . $_POST["target"]);  
        echo "<pre>$output</pre>";
        echo "<br><br>";

By:

if ($_SERVER["REQUEST_METHOD"] == "POST") {
            $target = validate_input($_POST["target"]);
            echo "<h2>Your Results for " . $target . "</h2>";
            $output = shell_exec('ping -c 3 ' . $target);  
            echo "<pre>$output</pre>";
            echo "<br><br>";
}

        function validate_input($data) {
          $target = trim($data);
          $target = stripslashes($data);
          $target = htmlspecialchars($data);
          $target = str_replace(";","",$target);
          return $target;
}
